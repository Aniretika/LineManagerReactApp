// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamQueue.Context;

#nullable disable

namespace SteamQueue.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221003214434__initial")]
    partial class _initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SteamQueue.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LineFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LineStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PositionPeriod")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("RegistrationTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LineId")
                        .IsUnique()
                        .HasFilter("[LineId] IS NOT NULL");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("SteamQueue.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("BotId")
                        .HasColumnType("bigint");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberInTheQueue")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("RegistrationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TelegramRequesterId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("TimelineFinish")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimelineStart")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SteamQueue.Entities.SteamAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SteamQueue.Entities.Line", b =>
                {
                    b.HasOne("SteamQueue.Entities.SteamAccount", "SteamAccount")
                        .WithOne("Line")
                        .HasForeignKey("SteamQueue.Entities.Line", "LineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SteamAccount");
                });

            modelBuilder.Entity("SteamQueue.Entities.Position", b =>
                {
                    b.HasOne("SteamQueue.Entities.Line", "Line")
                        .WithMany("Positions")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Line");
                });

            modelBuilder.Entity("SteamQueue.Entities.Line", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("SteamQueue.Entities.SteamAccount", b =>
                {
                    b.Navigation("Line");
                });
#pragma warning restore 612, 618
        }
    }
}
